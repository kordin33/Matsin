import React, { useState, useRef, useEffect } from 'react';
import * as math from 'mathjs';
import { Calculator, Binary, TrendingUp, Grid3x3, Table2, FileSpreadsheet, Sigma } from 'lucide-react';

const CasioProCalculator = () => {
  const [display, setDisplay] = useState('0');
  const [history, setHistory] = useState([]);
  const [mode, setMode] = useState('CALC');
  const [angleMode, setAngleMode] = useState('DEG');
  const [displayFormat, setDisplayFormat] = useState('NORM');
  const [isDragging, setIsDragging] = useState(false);
  const [position, setPosition] = useState({ x: 50, y: 50 });
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });
  const [showMenu, setShowMenu] = useState(false);
  const [showCatalog, setShowCatalog] = useState(false);
  const [variables, setVariables] = useState({ A: 0, B: 0, C: 0, D: 0, E: 0, F: 0, X: 0, Y: 0, Z: 0, M: 0, Ans: 0 });
  const [complexFormat, setComplexFormat] = useState('rectangular');
  const [baseSystem, setBaseSystem] = useState('DEC');
  
  const calcRef = useRef(null);

  const handleMouseDown = (e) => {
    if (e.target.closest('.drag-handle')) {
      setIsDragging(true);
      setDragOffset({
        x: e.clientX - position.x,
        y: e.clientY - position.y
      });
    }
  };

  const handleMouseMove = (e) => {
    if (isDragging) {
      setPosition({
        x: e.clientX - dragOffset.x,
        y: e.clientY - dragOffset.y
      });
    }
  };

  const handleMouseUp = () => setIsDragging(false);

  useEffect(() => {
    if (isDragging) {
      window.addEventListener('mousemove', handleMouseMove);
      window.addEventListener('mouseup', handleMouseUp);
      return () => {
        window.removeEventListener('mousemove', handleMouseMove);
        window.removeEventListener('mouseup', handleMouseUp);
      };
    }
  }, [isDragging, dragOffset]);

  const toRadians = (value) => {
    if (angleMode === 'DEG') return value * Math.PI / 180;
    if (angleMode === 'GRAD') return value * Math.PI / 200;
    return value;
  };

  const fromRadians = (value) => {
    if (angleMode === 'DEG') return value * 180 / Math.PI;
    if (angleMode === 'GRAD') return value * 200 / Math.PI;
    return value;
  };

  const factorial = (n) => {
    if (n < 0) return NaN;
    if (n === 0 || n === 1) return 1;
    return n * factorial(n - 1);
  };

  const formatNumber = (num) => {
    if (typeof num !== 'number' || isNaN(num)) return num;
    
    switch (displayFormat) {
      case 'SCI':
        return num.toExponential(8);
      case 'ENG':
        const exp = Math.floor(Math.log10(Math.abs(num)) / 3) * 3;
        return (num / Math.pow(10, exp)).toFixed(6) + 'E' + exp;
      case 'FIX':
        return num.toFixed(4);
      default:
        return Math.abs(num) < 0.00001 || Math.abs(num) > 1e10 ? num.toExponential(8) : num.toString();
    }
  };

  const calculate = () => {
    try {
      let result;
      const expr = display;
      
      let processed = expr
        .replace(/√ó/g, '*')
        .replace(/√∑/g, '/')
        .replace(/œÄ/g, Math.PI.toString())
        .replace(/e(?![0-9])/g, Math.E.toString())
        .replace(/‚àö/g, 'sqrt')
        .replace(/\^/g, '^');
      
      result = math.evaluate(processed);
      setVariables(prev => ({ ...prev, Ans: result }));
      
      const formatted = typeof result === 'number' ? formatNumber(result) : result.toString();
      addToHistory(expr, formatted);
      setDisplay(formatted);
    } catch (error) {
      setDisplay('Math ERROR');
      setTimeout(() => setDisplay('0'), 2000);
    }
  };

  const addToHistory = (expr, result) => {
    setHistory(prev => [{
      expr,
      result,
      mode,
      time: new Date().toLocaleTimeString()
    }, ...prev.slice(0, 49)]);
  };

  const handleInput = (value) => {
    if (display === '0' || display === 'Math ERROR') {
      setDisplay(value);
    } else {
      setDisplay(prev => prev + value);
    }
  };

  const clear = () => setDisplay('0');
  const del = () => setDisplay(prev => prev.length > 1 ? prev.slice(0, -1) : '0');

  const handleFunction = (func) => {
    try {
      const val = parseFloat(display);
      let result;
      
      switch(func) {
        case 'sin': result = Math.sin(toRadians(val)); break;
        case 'cos': result = Math.cos(toRadians(val)); break;
        case 'tan': result = Math.tan(toRadians(val)); break;
        case 'asin': result = fromRadians(Math.asin(val)); break;
        case 'acos': result = fromRadians(Math.acos(val)); break;
        case 'atan': result = fromRadians(Math.atan(val)); break;
        case 'sinh': result = Math.sinh(val); break;
        case 'cosh': result = Math.cosh(val); break;
        case 'tanh': result = Math.tanh(val); break;
        case 'ln': result = Math.log(val); break;
        case 'log': result = Math.log10(val); break;
        case 'exp': result = Math.exp(val); break;
        case 'sqrt': result = Math.sqrt(val); break;
        case 'cbrt': result = Math.cbrt(val); break;
        case 'square': result = val * val; break;
        case 'cube': result = val * val * val; break;
        case 'inv': result = 1 / val; break;
        case 'abs': result = Math.abs(val); break;
        case 'fact': result = factorial(Math.floor(val)); break;
        default: return;
      }
      
      setDisplay(formatNumber(result));
      addToHistory(`${func}(${val})`, formatNumber(result));
    } catch (e) {
      setDisplay('Math ERROR');
    }
  };

  const constants = {
    'œÄ': Math.PI,
    'e': Math.E,
    'œÜ': 1.618033988749895,
    'c': 299792458,
    'h': 6.62607015e-34,
    'G': 6.67430e-11,
    'NA': 6.02214076e23,
    'R': 8.314462618,
    'k': 1.380649e-23,
  };

  const modes = [
    { id: 'CALC', name: 'Calculate', icon: Calculator, desc: 'Podstawowe' },
    { id: 'CMPLX', name: 'Complex', icon: 'üî¢', desc: 'Zespolone' },
    { id: 'BASE-N', name: 'Base-N', icon: Binary, desc: 'Systemy' },
    { id: 'STAT', name: 'Statistics', icon: TrendingUp, desc: 'Statystyka' },
    { id: 'EQN', name: 'Equation', icon: Sigma, desc: 'R√≥wnania' },
    { id: 'MATRIX', name: 'Matrix', icon: Grid3x3, desc: 'Macierze' },
    { id: 'TABLE', name: 'Table', icon: Table2, desc: 'Tabele' },
    { id: 'SHEET', name: 'Sheet', icon: FileSpreadsheet, desc: 'Arkusz' },
  ];

  const Button = ({ value, onClick, className = '' }) => (
    <button onClick={onClick} className={`calc-btn ${className}`}>
      {value}
    </button>
  );

  return (
    <div className="app-container">
      <div 
        ref={calcRef}
        className={`casio-calculator ${isDragging ? 'dragging' : ''}`}
        style={{ transform: `translate(${position.x}px, ${position.y}px)` }}
      >
        <div className="calc-header drag-handle" onMouseDown={handleMouseDown}>
          <div className="brand">
            <span className="brand-name">CASIO</span>
            <span className="model">fx-991CW ClassWiz</span>
          </div>
          <div className="header-controls">
            <button className="header-btn" onClick={() => setShowCatalog(!showCatalog)}>üìö</button>
            <button className="header-btn" onClick={() => setShowMenu(!showMenu)}>‚öôÔ∏è</button>
          </div>
        </div>

        {showMenu && (
          <div className="mode-selector">
            <div className="mode-grid">
              {modes.map(m => (
                <div
                  key={m.id}
                  className={`mode-card ${mode === m.id ? 'active' : ''}`}
                  onClick={() => { setMode(m.id); setShowMenu(false); }}
                >
                  {typeof m.icon === 'string' ? (
                    <span className="mode-emoji">{m.icon}</span>
                  ) : (
                    <m.icon size={24} />
                  )}
                  <div className="mode-name">{m.name}</div>
                  <div className="mode-desc">{m.desc}</div>
                </div>
              ))}
            </div>
          </div>
        )}

        {showCatalog && (
          <div className="catalog-panel">
            <div className="catalog-header">
              <span>Katalog Sta≈Çych</span>
              <button onClick={() => setShowCatalog(false)}>‚úï</button>
            </div>
            <div className="catalog-grid">
              {Object.entries(constants).map(([name, value]) => (
                <div
                  key={name}
                  className="catalog-item"
                  onClick={() => { handleInput(value.toString()); setShowCatalog(false); }}
                >
                  <span className="const-name">{name}</span>
                  <span className="const-value">{formatNumber(value)}</span>
                </div>
              ))}
            </div>
          </div>
        )}

        <div className="status-bar">
          <span className="status-item mode-badge">{mode}</span>
          <span className="status-item">{angleMode}</span>
          <span className="status-item">{displayFormat}</span>
        </div>

        <div className="main-display">
          <div className="display-text">{display}</div>
          <div className="display-footer">
            <span className="ans-display">Ans = {formatNumber(variables.Ans)}</span>
          </div>
        </div>

        <div className="history-bar">
          {history.slice(0, 3).map((item, idx) => (
            <div key={idx} className="history-mini" onClick={() => setDisplay(item.result)}>
              {item.result.slice(0, 10)}
            </div>
          ))}
        </div>

        <div className="control-panel">
          <button className="ctrl-btn" onClick={() => setAngleMode(angleMode === 'DEG' ? 'RAD' : angleMode === 'RAD' ? 'GRAD' : 'DEG')}>
            {angleMode}
          </button>
          <button className="ctrl-btn" onClick={() => setDisplayFormat(displayFormat === 'NORM' ? 'SCI' : displayFormat === 'SCI' ? 'FIX' : displayFormat === 'FIX' ? 'ENG' : 'NORM')}>
            {displayFormat}
          </button>
        </div>

        <div className="sci-panel">
          <div className="sci-row">
            <Button value="sin" onClick={() => handleFunction('sin')} className="func-btn" />
            <Button value="cos" onClick={() => handleFunction('cos')} className="func-btn" />
            <Button value="tan" onClick={() => handleFunction('tan')} className="func-btn" />
            <Button value="ln" onClick={() => handleFunction('ln')} className="func-btn" />
            <Button value="log" onClick={() => handleFunction('log')} className="func-btn" />
          </div>
          <div className="sci-row">
            <Button value="sin‚Åª¬π" onClick={() => handleFunction('asin')} className="func-btn" />
            <Button value="cos‚Åª¬π" onClick={() => handleFunction('acos')} className="func-btn" />
            <Button value="tan‚Åª¬π" onClick={() => handleFunction('atan')} className="func-btn" />
            <Button value="eÀ£" onClick={() => handleFunction('exp')} className="func-btn" />
            <Button value="10À£" onClick={() => handleInput('10^')} className="func-btn" />
          </div>
          <div className="sci-row">
            <Button value="x¬≤" onClick={() => handleFunction('square')} className="func-btn" />
            <Button value="x¬≥" onClick={() => handleFunction('cube')} className="func-btn" />
            <Button value="‚àö" onClick={() => handleFunction('sqrt')} className="func-btn" />
            <Button value="‚àõ" onClick={() => handleFunction('cbrt')} className="func-btn" />
            <Button value="n!" onClick={() => handleFunction('fact')} className="func-btn" />
          </div>
        </div>

        <div className="keypad">
          <div className="keypad-row">
            <Button value="AC" onClick={clear} className="btn-clear" />
            <Button value="DEL" onClick={del} className="btn-del" />
            <Button value="(" onClick={() => handleInput('(')} className="btn-bracket" />
            <Button value=")" onClick={() => handleInput(')')} className="btn-bracket" />
          </div>
          <div className="keypad-row">
            <Button value="7" onClick={() => handleInput('7')} className="btn-num" />
            <Button value="8" onClick={() => handleInput('8')} className="btn-num" />
            <Button value="9" onClick={() => handleInput('9')} className="btn-num" />
            <Button value="√∑" onClick={() => handleInput('√∑')} className="btn-op" />
          </div>
          <div className="keypad-row">
            <Button value="4" onClick={() => handleInput('4')} className="btn-num" />
            <Button value="5" onClick={() => handleInput('5')} className="btn-num" />
            <Button value="6" onClick={() => handleInput('6')} className="btn-num" />
            <Button value="√ó" onClick={() => handleInput('√ó')} className="btn-op" />
          </div>
          <div className="keypad-row">
            <Button value="1" onClick={() => handleInput('1')} className="btn-num" />
            <Button value="2" onClick={() => handleInput('2')} className="btn-num" />
            <Button value="3" onClick={() => handleInput('3')} className="btn-num" />
            <Button value="‚àí" onClick={() => handleInput('-')} className="btn-op" />
          </div>
          <div className="keypad-row">
            <Button value="0" onClick={() => handleInput('0')} className="btn-num" />
            <Button value="." onClick={() => handleInput('.')} className="btn-num" />
            <Button value="œÄ" onClick={() => handleInput('œÄ')} className="btn-const" />
            <Button value="+" onClick={() => handleInput('+')} className="btn-op" />
          </div>
          <div className="keypad-row">
            <Button value="=" onClick={calculate} className="btn-exe" />
          </div>
        </div>
      </div>

      <style>{`
        * {
          box-sizing: border-box;
          margin: 0;
          padding: 0;
        }

        .app-container {
          position: fixed;
          inset: 0;
          background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
          display: flex;
          align-items: center;
          justify-content: center;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        }

        .casio-calculator {
          position: fixed;
          width: 420px;
          background: linear-gradient(145deg, rgba(15, 15, 30, 0.98), rgba(25, 25, 40, 0.98));
          backdrop-filter: blur(60px) saturate(200%);
          border-radius: 32px;
          padding: 24px;
          box-shadow: 0 30px 80px rgba(0, 0, 0, 0.6), 0 0 0 1px rgba(255, 255, 255, 0.08) inset;
          border: 1.5px solid rgba(255, 255, 255, 0.1);
          max-height: 95vh;
          overflow-y: auto;
          transition: all 0.3s ease;
        }

        .casio-calculator.dragging {
          transform: scale(1.03) !important;
          box-shadow: 0 40px 100px rgba(0, 0, 0, 0.7);
        }

        .calc-header {
          cursor: grab;
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 16px 20px;
          margin: -24px -24px 20px;
          background: linear-gradient(135deg, rgba(102, 126, 234, 0.2), rgba(118, 75, 162, 0.2));
          border-radius: 32px 32px 0 0;
          border-bottom: 1px solid rgba(255, 255, 255, 0.08);
        }

        .calc-header:active {
          cursor: grabbing;
        }

        .brand {
          display: flex;
          flex-direction: column;
          gap: 2px;
        }

        .brand-name {
          font-size: 26px;
          font-weight: 800;
          letter-spacing: 3px;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
        }

        .model {
          font-size: 11px;
          color: rgba(255, 255, 255, 0.6);
          letter-spacing: 1.5px;
          font-weight: 600;
        }

        .header-controls {
          display: flex;
          gap: 10px;
        }

        .header-btn {
          width: 40px;
          height: 40px;
          background: rgba(255, 255, 255, 0.08);
          border: 1px solid rgba(255, 255, 255, 0.12);
          border-radius: 12px;
          color: white;
          font-size: 20px;
          cursor: pointer;
          transition: all 0.3s ease;
        }

        .header-btn:hover {
          background: rgba(255, 255, 255, 0.15);
          transform: scale(1.1);
        }

        .mode-selector {
          background: rgba(0, 0, 0, 0.5);
          border-radius: 20px;
          padding: 20px;
          margin-bottom: 20px;
          border: 1px solid rgba(255, 255, 255, 0.08);
        }

        .mode-grid {
          display: grid;
          grid-template-columns: repeat(4, 1fr);
          gap: 10px;
        }

        .mode-card {
          background: rgba(255, 255, 255, 0.06);
          border: 1px solid rgba(255, 255, 255, 0.1);
          border-radius: 14px;
          padding: 14px 10px;
          text-align: center;
          cursor: pointer;
          transition: all 0.3s ease;
          display: flex;
          flex-direction: column;
          align-items: center;
          gap: 8px;
        }

        .mode-card:hover {
          background: rgba(255, 255, 255, 0.12);
          transform: translateY(-4px);
        }

        .mode-card.active {
          background: linear-gradient(135deg, rgba(102, 126, 234, 0.35), rgba(118, 75, 162, 0.35));
          border-color: rgba(102, 126, 234, 0.6);
        }

        .mode-card svg,
        .mode-emoji {
          color: rgba(255, 255, 255, 0.9);
          font-size: 24px;
        }

        .mode-name {
          font-size: 12px;
          font-weight: 700;
          color: white;
        }

        .mode-desc {
          font-size: 9px;
          color: rgba(255, 255, 255, 0.6);
        }

        .catalog-panel {
          background: rgba(0, 0, 0, 0.6);
          border-radius: 20px;
          padding: 20px;
          margin-bottom: 20px;
          border: 1px solid rgba(255, 255, 255, 0.08);
          max-height: 300px;
          overflow-y: auto;
        }

        .catalog-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 16px;
          padding-bottom: 16px;
          border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .catalog-header span {
          color: white;
          font-size: 15px;
          font-weight: 700;
        }

        .catalog-header button {
          background: rgba(255, 59, 48, 0.3);
          border: 1px solid rgba(255, 59, 48, 0.4);
          color: white;
          font-size: 18px;
          cursor: pointer;
          padding: 6px 12px;
          border-radius: 8px;
        }

        .catalog-grid {
          display: grid;
          gap: 10px;
        }

        .catalog-item {
          background: rgba(255, 255, 255, 0.06);
          border: 1px solid rgba(255, 255, 255, 0.1);
          border-radius: 12px;
          padding: 12px 16px;
          cursor: pointer;
          transition: all 0.3s ease;
          display: flex;
          justify-content: space-between;
        }

        .catalog-item:hover {
          background: rgba(255, 255, 255, 0.12);
          transform: translateX(6px);
        }

        .const-name {
          color: white;
          font-weight: 700;
          font-size: 18px;
        }

        .const-value {
          color: rgba(255, 255, 255, 0.6);
          font-size: 13px;
          font-family: monospace;
        }

        .status-bar {
          display: flex;
          gap: 8px;
          padding: 10px 14px;
          background: rgba(0, 0, 0, 0.4);
          border-radius: 14px;
          margin-bottom: 16px;
          border: 1px solid rgba(255, 255, 255, 0.06);
        }

        .status-item {
          font-size: 10px;
          font-weight: 700;
          color: rgba(255, 255, 255, 0.8);
          padding: 6px 12px;
          background: rgba(102, 126, 234, 0.25);
          border-radius: 8px;
          letter-spacing: 0.8px;
        }

        .mode-badge {
          background: linear-gradient(135deg, #667eea, #764ba2);
        }

        .main-display {
          background: linear-gradient(145deg, rgba(0, 0, 0, 0.6), rgba(15, 15, 30, 0.6));
          border-radius: 20px;
          padding: 24px;
          margin-bottom: 16px;
          border: 1px solid rgba(255, 255, 255, 0.08);
          min-height: 120px;
        }

        .display-text {
          color: #fff;
          font-size: 40px;
          font-weight: 300;
          text-align: right;
          word-break: break-all;
          font-family: monospace;
          text-shadow: 0 0 30px rgba(102, 126, 234, 0.6);
          margin-bottom: 16px;
        }

        .display-footer {
          padding-top: 12px;
          border-top: 1px solid rgba(255, 255, 255, 0.06);
        }

        .ans-display {
          font-size: 12px;
          color: rgba(255, 255, 255, 0.5);
          font-family: monospace;
        }

        .history-bar {
          display: flex;
          gap: 8px;
          margin-bottom: 16px;
          overflow-x: auto;
        }

        .history-mini {
          background: rgba(255, 255, 255, 0.06);
          border: 1px solid rgba(255, 255, 255, 0.1);
          border-radius: 10px;
          padding: 8px 12px;
          cursor: pointer;
          white-space: nowrap;
          font-size: 12px;
          color: white;
          transition: all 0.3s ease;
        }

        .history-mini:hover {
          background: rgba(255, 255, 255, 0.12);
        }

        .control-panel {
          display: grid;
          grid-template-columns: repeat(2, 1fr);
          gap: 8px;
          margin-bottom: 16px;
        }

        .ctrl-btn {
          background: rgba(102, 126, 234, 0.25);
          border: 1px solid rgba(102, 126, 234, 0.4);
          color: white;
          padding: 12px;
          border-radius: 12px;
          font-size: 12px;
          font-weight: 700;
          cursor: pointer;
          transition: all 0.3s ease;
        }

        .ctrl-btn:hover {
          background: rgba(102, 126, 234, 0.4);
          transform: translateY(-2px);
        }

        .sci-panel {
          display: flex;
          flex-direction: column;
          gap: 8px;
          margin-bottom: 16px;
          padding: 16px;
          background: rgba(0, 0, 0, 0.3);
          border-radius: 18px;
          border: 1px solid rgba(255, 255, 255, 0.06);
        }

        .sci-row {
          display: grid;
          grid-template-columns: repeat(5, 1fr);
          gap: 6px;
        }

        .keypad {
          display: flex;
          flex-direction: column;
          gap: 10px;
        }

        .keypad-row {
          display: grid;
          grid-template-columns: repeat(4, 1fr);
          gap: 10px;
        }

        .keypad-row:last-child {
          grid-template-columns: 1fr;
        }

        .calc-btn {
          background: rgba(255, 255, 255, 0.1);
          border: 1px solid rgba(255, 255, 255, 0.15);
          color: white;
          padding: 16px;
          border-radius: 14px;
          font-size: 18px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.2s ease;
        }

        .calc-btn:hover {
          background: rgba(255, 255, 255, 0.18);
          transform: translateY(-2px);
        }

        .func-btn {
          background: rgba(102, 126, 234, 0.2);
          border-color: rgba(102, 126, 234, 0.4);
          padding: 12px;
          font-size: 14px;
        }

        .btn-num {
          background: rgba(255, 255, 255, 0.12);
          font-weight: 700;
        }

        .btn-op {
          background: rgba(255, 152, 0, 0.25);
          border-color: rgba(255, 152, 0, 0.4);
          font-weight: 800;
          font-size: 22px;
        }

        .btn-bracket {
          background: rgba(255, 204, 0, 0.2);
          border-color: rgba(255, 204, 0, 0.3);
        }

        .btn-clear {
          background: rgba(255, 59, 48, 0.25);
          border-color: rgba(255, 59, 48, 0.4);
          font-weight: 800;
        }

        .btn-del {
          background: rgba(255, 149, 0, 0.25);
          border-color: rgba(255, 149, 0, 0.4);
        }

        .btn-const {
          background: rgba(76, 217, 100, 0.2);
          border-color: rgba(76, 217, 100, 0.3);
        }

        .btn-exe {
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          border: 1px solid rgba(255, 255, 255, 0.2);
          font-weight: 800;
          font-size: 24px;
          padding: 20px;
          box-shadow: 0 8px 24px rgba(102, 126, 234, 0.5);
        }

        .btn-exe:hover {
          box-shadow: 0 12px 32px rgba(102, 126, 234, 0.6);
          transform: translateY(-4px);
        }
      `}</style>
    </div>
  );
};

export default CasioProCalculator;